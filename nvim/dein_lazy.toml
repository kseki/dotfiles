#-------------------------------------------
# Window
#-------------------------------------------
[[plugins]]
repo = 'simeji/winresizer'
on_cmd ='WinResizerStartResize'
hook_source = '''
  let g:winresizer_vert_resize=1
'''

#-------------------------------------------
# Text object
#-------------------------------------------
[[plugins]]
repo = 'easymotion/vim-easymotion'
on_event = 'VimEnter'
hook_add = '''
  let g:EasyMotion_do_mapping = 0

  " =======================================
  " General Configuration
  " =======================================
  let g:EasyMotion_keys = ';HKLYUIOPNM,QWERTASDGZXCVBJF'
  " Show target key with upper case to improve readability
  let g:EasyMotion_use_upper = 1
  " Jump to first match with enter & space
  let g:EasyMotion_enter_jump_first = 1
  let g:EasyMotion_space_jump_first = 1
'''
hook_post_source = '''
  " =======================================
  " Find Motions
  " =======================================
  " Jump to anywhere you want by just `4` or `3` key strokes without thinking!
  " `s{char}{char}{target}`
  nmap s <Plug>(easymotion-s2)
  xmap s <Plug>(easymotion-s2)
  omap z <Plug>(easymotion-s2)
  " Turn on case sensitive feature
  let g:EasyMotion_smartcase = 1

  " =======================================
  " Line Motions
  " =======================================
  " `JK` Motions: Extend line motions
  map <Leader>j <Plug>(easymotion-j)
  map <Leader>k <Plug>(easymotion-k)
  " keep cursor column with `JK` motions
  let g:EasyMotion_startofline = 0

  map f <Plug>(easymotion-bd-fl)
  map t <Plug>(easymotion-bd-tl)
  map F <Plug>(easymotion-Fl)
  map T <Plug>(easymotion-Tl)
  " :h easymotion-command-line
  " =======================================
  " Search Motions
  " =======================================
  " Extend search motions with vital-over command line interface
  " Incremental highlight of all the matches
  " Now, you don't need to repetitively press `n` or `N` with EasyMotion feature
  " `<Tab>` & `<S-Tab>` to scroll up/down a page with next match
  " :h easymotion-command-line
  nmap g/ <Plug>(easymotion-sn)
  xmap g/ <Plug>(easymotion-sn)
  omap g/ <Plug>(easymotion-tn)

  " =======================================
  " Repeat Motions
  " =======================================
  map <Leader><Leader> <Plug>(easymotion-repeat)
  map <C-n> <Plug>(easymotion-next)
  map <C-p> <Plug>(easymotion-prev)
'''

#-------------------------------------------
# Git
#-------------------------------------------
[[plugins]]
repo = 'tpope/vim-fugitive'
on_event = 'VimEnter'
hook_add = '''
  nnoremap [fugitive] <Nop>
  nmap <Leader>g [fugitive]

  nnoremap [fugitive]d :<C-u>Gdiff<CR>
  nnoremap [fugitive]s :<C-u>Gstatus<CR>
  nnoremap [fugitive]l :<C-u>Glog<CR>
  nnoremap [fugitive]a :<C-u>Gwrite<CR>
  nnoremap [fugitive]c :<C-u>Git commit<CR>
  nnoremap [fugitive]C :<C-u>Git commit --amend<CR>
  nnoremap [fugitive]b :<C-u>Git blame<CR>
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'
on_event = 'VimEnter'
hook_add = '''
  nnoremap g] :GitGutterNextHunk<CR>
  nnoremap g[ :GitGutterPrevHunk<CR>
  nnoremap <C-s> :GitGutterStageHunk<CR>
  nnoremap <C-q> :GitGutterUndoHunk<CR>
'''

[[plugins]]
repo = 'mattn/gist-vim'
on_cmd = 'Gist'
depends = ['webapi-vim']
hook_add = '''
  let g:gist_post_private = 1
'''

[[plugins]]
repo = 'mattn/webapi-vim'

#-------------------------------------------
# Filer
#-------------------------------------------
[[plugins]]
repo = 'scrooloose/nerdtree'
on_cmd = ['NERDTreeFind', 'NERDTreeToggle']
hook_add = '''
  let g:NERDTreeShowHidden = 1
  let g:NERDTreeChDirMode=2
  let g:NERDTreeIgnore=['\.rbc$', '\~$', '\.pyc$', '\.db$', '\.sqlite$', '__pycache__', '\.git$']
  let g:NERDTreeSortOrder=['^__\.py$', '\/$', '*', '\.swp$', '\.bak$', '\~$']
  let g:NERDTreeShowBookmarks=1
  let g:NERDTreeMapOpenInTabSilent = '<RightMouse>'
  let g:NERDTreeWinSize = 50
  let g:NERDTreeQuitOnOpen = 1

  set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc,*.db,*.sqlite

  nnoremap <silent> <F2> :NERDTreeFind<CR>
  nnoremap <silent> <F3> :NERDTreeToggle<CR>
'''

[[plugins]]
repo = 'ryanoasis/vim-devicons'
on_source = 'nerdtree'
hook_source = '''
  " loading the plugin
  let g:webdevicons_enable = 1
  " adding the flags to NERDTree
  let g:webdevicons_enable_nerdtree = 1
  " adding to vim-airline's tabline
  let g:webdevicons_enable_airline_tabline = 1
  " adding to vim-airline's statusline
  let g:webdevicons_enable_airline_statusline = 1
  " turn on/off file node glyph decorations (not particularly useful)
  let g:WebDevIconsUnicodeDecorateFileNodes = 1
  " use double-width(1) or single-width(0) glyphs
  " only manipulates padding, has no effect on terminal or set(guifont) font
  let g:WebDevIconsUnicodeGlyphDoubleWidth = 1
'''


[[plugins]]
repo = 'junegunn/fzf'

[[plugins]]
repo = 'junegunn/fzf.vim'
on_event = 'VimEnter'
depends = ['fzf']
hook_source = '''
  let g:fzf_action = {
        \ 'ctrl-s': 'split',
        \ 'ctrl-v': 'vsplit' }

  set wildmode=list:longest,list:full
  set wildignore+=*.o,*.obj,.git,*.rbc,*.pyc,__pycache__
  let $FZF_DEFAULT_COMMAND =  "find * -path '*/\.*' -prune -o -path 'node_modules/**' -prune -o -path 'target/**' -prune -o -path 'dist/**' -prune -o  -type f -print -o -type l -print 2> /dev/null"
  "let $FZF_DEFAULT_OPTS = "--height 50% --layout=reverse --border --inline-info --preview 'head -100 {}'"

  " The Silver Searcher
  if executable('ag')
    let $FZF_DEFAULT_COMMAND = 'ag --path-to-ignore ~/.agignore --hidden -g ""'
    set grepprg=ag\ --nogroup\ --nocolor

    nnoremap <Space>a :Ag<Space>
    nnoremap <Space>aw :Ag<Space><C-r><C-w>
  endif

  " ripgrep
  if executable('rg')
    let $FZF_DEFAULT_COMMAND = 'rg --files --hidden --follow --glob "!{node_modules/*,.git/*}"'
    set grepprg=rg\ --vimgrep
    command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)

    nnoremap <Space>a :Rg<Space>
    nnoremap <Space>aw :Rg<Space><C-r><C-w>
  endif

  cnoremap <C-P> <C-R>=expand("%:p:h") . "/" <CR>
  nnoremap <Space>f :FZF<CR>
  nnoremap <Space>s :GFiles?<CR>
  nnoremap <Space>b :Buffers<CR>
  nnoremap <Space>t :Tags<CR>
  nnoremap <space>x :Commands<CR>
  " nnoremap <Space>l :BLines<Space>

  " Mapping selecting mappings
  nmap <leader><tab> <plug>(fzf-maps-n)
  xmap <leader><tab> <plug>(fzf-maps-x)
  omap <leader><tab> <plug>(fzf-maps-o)
'''

[[plugins]]
repo = 'justinhoward/fzf-neoyank'
on_source = 'fzf'
hook_source = '''
 nnoremap <leader>y :FZFNeoyank<cr>
 nnoremap <leader>Y :FZFNeoyank " P<cr>
 vnoremap <leader>y :FZFNeoyankSelection<cr>
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = 'context_filetype.vim'
on_ft = ['vim', 'toml']
hook_add = '''
 let g:precious_enable_switch_CursorMoved = { '*': 0, 'help': 1 }
 let g:precious_enable_switchers = {
    \ "*" : {
    \   "setfiletype" : 0
    \ },
    \ "toml" : {
    \   "setfiletype" : 1
    \ },
    \ "html" : {
    \   "setfiletype" : 1
    \ },
    \ "haml" : {
    \   "setfiletype" : 0
    \ },
    \}
 autocmd MyAutoCmd InsertEnter * :PreciousSwitch
 autocmd MyAutoCmd InsertLeave * :PreciousReset"}
'''

#-------------------------------------------
# Register
#-------------------------------------------
[[plugins]]
repo = 'Shougo/neoyank.vim'
on_event = 'VimEnter'

[[plugins]]
repo = 'junegunn/vim-peekaboo'
on_event = 'VimEnter'
hook_source = '''
  let g:peekaboo_window = 'vert bo 80new'
'''

#-------------------------------------------
# Completions
#-------------------------------------------
[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'
hook_source = '''
  let g:deoplete#enable_at_startup = 1
  call deoplete#custom#option('min_pattern_length', 1)
  inoremap <expr><tab> pumvisible() ? "\<C-n>" :
        \ neosnippet#expandable_or_jumpable() ?
        \    "\<Plug>(neosnippet_expand_or_jump)" : "\<tab>"
  call deoplete#custom#source('_', 'converters', [
        \ 'converter_remove_paren',
        \ 'converter_remove_overlap',
        \ 'converter_truncate_abbr',
        \ 'converter_truncate_menu',
        \ 'converter_auto_delimiter',
        \ ])
  call deoplete#custom#source('_', 'matchers', ['matcher_fuzzy', 'matcher_length'])
'''
on_event = 'InsertEnter'

[[plugins]]
repo = 'roxma/nvim-yarp'
if = "!has('nvim')"
on_source = ['deoplete.nvim']

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
if = "!has('nvim')"
on_source = ['deoplete.nvim']

[[plugins]]
repo = 'Shougo/neosnippet'
hook_source = '''
  let g:neosnippet#snippets_directory='~/.cache/dein/repos/github.com/honza/vim-snippets/snippets/'

  imap <C-k> <Plug>(neosnippet_expand_or_jump)
  smap <C-k> <Plug>(neosnippet_expand_or_jump)
  xmap <C-k> <Plug>(neosnippet_expand_target)
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif
'''
on_source = ['deoplete.nvim']
depends = ['neosnippet-snippets']

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'ujihisa/neco-look'
on_source = ['deoplete.nvim']

#-------------------------------------------
# uplus/deoplete-solargraphRuby
#-------------------------------------------
[[plugins]]
repo = 'osyo-manga/vim-monster'
on_ft = 'ruby'
hook_source = '''
  let g:monster#completion#solargraph#backend = "async_solargraph_suggest"
  let g:monster#completion#backend = 'solargraph'
  let g:deoplete#sources#omni#input_patterns = {
    \   "ruby" : '[^. *\t]\.\w*\|\h\w*::',
    \}
'''

# [[plugins]]
# repo = 'uplus/deoplete-solargraph'
# on_ft = 'ruby'
[[plugins]]
repo = 'keith/swift.vim'
on_ft = 'swift'

[[plugins]]
repo = 'tpope/vim-endwise'
on_ft = 'ruby'

[[plugins]]
repo = 'jgdavey/vim-blockle'
on_ft = 'ruby'
hook_source = '''
  let g:blockle_mapping = '<Leader>rb'
'''

[[plugins]]
repo = 'ecomba/vim-ruby-refactoring'
on_ft = 'ruby'

[[plugins]]
repo = 'tpope/vim-haml'
on_ft = 'haml'

[[plugins]]
repo = 'slim-template/vim-slim'
on_ft = 'slim'

[[plugins]]
repo = 'tpope/vim-rails'
on_ft = ['ruby', 'eruby', 'slim', 'haml']

[[plugins]]
repo = 'jvanja/vim-bootstrap4-snippets'
on_ft = ['erb', 'slim', 'haml']

[[plugins]]
repo = 'alvan/vim-closetag'
on_ft = ['erb', 'html']

#-------------------------------------------
# Coffee Script
#-------------------------------------------
[[plugins]]
repo = 'kchmck/vim-coffee-script'
on_ft = ['coffee']

#-------------------------------------------
# Python
#-------------------------------------------
[[plugins]]
repo = 'zchee/deoplete-jedi'
depends = ['deoplete.nvim']
if = "has('nvim')"
on_ft = 'python'

[[plugins]]
repo = 'hynek/vim-python-pep8-indent'
on_ft = 'python'

#-------------------------------------------
# Go
#-------------------------------------------
[[plugins]]
repo = 'zchee/deoplete-go'
depends = ['deoplete.nvim']
on_ft = 'go'
build = 'make'

[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'

#-------------------------------------------
# Vim
#-------------------------------------------
[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = 'vim'

#-------------------------------------------
# TOML
#-------------------------------------------
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

#-------------------------------------------
# Markdown
#-------------------------------------------
[[plugin]]
repo = 'gabrielelana/vim-markdown'
on_ft = 'markdown'

[[plugins]]
repo = 'kannokanno/previm'
on_ft = 'markdown'
hook_source = '''
  let g:previm_open_cmd = 'open'

  nnoremap [previm] <Nop>
  nmap <Leader>p [previm]
  nnoremap <silent> [previm]o :<C-u>PrevimOpen<CR>
  nnoremap <silent> [previm]r :call previm#refresh()<CR>
'''

#-------------------------------------------
# JavaScript
#-------------------------------------------
[[plugins]]
repo = 'carlitux/deoplete-ternjs'
on_ft = 'javascript'
build = 'npm install --global tern'

[[plugins]]
repo = 'posva/vim-vue'
on_ft = 'vue'

[[plugins]]
repo = 'leafgarland/typescript-vim'
on_ft = 'typescript'

[[plugins]]
repo = 'peitalin/vim-jsx-typescript'
on_ft = 'typescript'

#-------------------------------------------
# JSON
#-------------------------------------------
[[plugins]]
repo = 'elzr/vim-json'
on_ft = 'json'
hook_source = '''
  set conceallevel=0
  let g:vim_json_syntax_conceal = 0
'''

#-------------------------------------------
# HTML
#-------------------------------------------
[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'eruby', 'haml']

#-------------------------------------------
# CSS
#-------------------------------------------
[[plugins]]
repo = 'hail2u/vim-css3-syntax'
on_ft = ['css', 'scss']

[[plugins]]
repo = 'ap/vim-css-color'
on_ft = ['css', 'scss']

#-------------------------------------------
# Fish
#-------------------------------------------
[[plugins]]
repo = 'dag/vim-fish'
on_ft = 'fish'

#-------------------------------------------
# Elixir
#-------------------------------------------
[[plugins]]
repo = 'elixir-lang/vim-elixir'
on_ft = 'elixir'

#-------------------------------------------
# Terraform
#-------------------------------------------
[[plugins]]
repo = 'hashivim/vim-terraform'
on_ft = 'terraform'

#-------------------------------------------
# Objective-c
#-------------------------------------------
[[plugins]]
repo = 'b4winckler/vim-objc'
on_ft = 'c'
