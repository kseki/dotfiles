#-------------------------------------------
# Window
#-------------------------------------------
[[plugins]]
repo = 'simeji/winresizer'
on_event = 'BufRead'
hook_source = '''
  let g:winresizer_start_key = '<C-T>'
  let g:winresizer_vert_resize=5
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
on_event = 'BufRead'
hook_add = '''
  let g:netrw_nogx = 1 " disable netrw's gx mapping.
  nmap gx <Plug>(openbrowser-smart-search)
  vmap gx <Plug>(openbrowser-smart-search)
'''

#-------------------------------------------
# Text object
#-------------------------------------------
[[plugins]]
repo = 'cohama/lexima.vim'
on_event = 'BufRead'

[[plugins]]
repo = 'tpope/vim-surround'
on_event = 'BufRead'

[[plugins]]
repo = 'terryma/vim-multiple-cursors'
on_event = 'BufRead'

[[plugins]]
repo = 'AndrewRadev/switch.vim'
hook_add = '''
  let g:switch_mapping = "!"
'''

[[plugins]]
repo = 'scrooloose/nerdcommenter'
on_event = 'BufRead'
hook_add = '''
  let g:NERDSpaceDelims = 1
'''

[[plugins]]
repo = 'ntpeters/vim-better-whitespace'
on_event = 'BufWinEnter'
hook_source = '''
  let g:better_whitespace_enabled = 1
  let g:strip_whitespace_on_save = 1
  let g:strip_whitespace_confirm = 0
  let g:better_whitespace_filetypes_blacklist = [
        \ 'markdown',
        \ 'git',
        \ 'diff',
        \ 'gitcommit',
        \ 'help',
        \ 'snippets'
        \ ]
'''

[[plugins]]
repo = 'thinca/vim-qfreplace'
on_event = 'VimEnter'

[[plugins]]
repo = 'easymotion/vim-easymotion'
on_event = 'VimEnter'
hook_add = '''
  let g:EasyMotion_do_mapping = 0

  " =======================================
  " General Configuration
  " =======================================
  let g:EasyMotion_keys = ';HKLYUIOPNM,QWERTASDGZXCVBJF'
  " Show target key with upper case to improve readability
  let g:EasyMotion_use_upper = 1
  " Jump to first match with enter & space
  let g:EasyMotion_enter_jump_first = 1
  let g:EasyMotion_space_jump_first = 1
'''
hook_post_source = '''
  " =======================================
  " Find Motions
  " =======================================
  " Jump to anywhere you want by just `4` or `3` key strokes without thinking!
  " `s{char}{char}{target}`
  nmap s <Plug>(easymotion-s2)
  xmap s <Plug>(easymotion-s2)
  omap z <Plug>(easymotion-s2)
  " Turn on case sensitive feature
  let g:EasyMotion_smartcase = 1

  " =======================================
  " Line Motions
  " =======================================
  " `JK` Motions: Extend line motions
  map <Leader>j <Plug>(easymotion-j)
  map <Leader>k <Plug>(easymotion-k)
  " keep cursor column with `JK` motions
  let g:EasyMotion_startofline = 0

  map f <Plug>(easymotion-bd-fl)
  map t <Plug>(easymotion-bd-tl)
  map F <Plug>(easymotion-Fl)
  map T <Plug>(easymotion-Tl)
  " :h easymotion-command-line
  " =======================================
  " Search Motions
  " =======================================
  " Extend search motions with vital-over command line interface
  " Incremental highlight of all the matches
  " Now, you don't need to repetitively press `n` or `N` with EasyMotion feature
  " `<Tab>` & `<S-Tab>` to scroll up/down a page with next match
  " :h easymotion-command-line
  nmap g/ <Plug>(easymotion-sn)
  xmap g/ <Plug>(easymotion-sn)
  omap g/ <Plug>(easymotion-tn)

  " =======================================
  " Repeat Motions
  " =======================================
  map <Leader><Leader> <Plug>(easymotion-repeat)
  map <C-n> <Plug>(easymotion-next)
  map <C-p> <Plug>(easymotion-prev)
'''

#-------------------------------------------
# Git
#-------------------------------------------
[[plugins]]
repo = 'tpope/vim-fugitive'
on_event = 'VimEnter'
hook_add = '''
  nnoremap [fugitive] <Nop>
  nmap <Leader>g [fugitive]

  nnoremap [fugitive]d :<C-u>Git diff<CR>
  nnoremap [fugitive]s :<C-u>Git<CR>
  nnoremap [fugitive]l :<C-u>Git log<CR>
  nnoremap [fugitive]c :<C-u>Git commit<CR>
  nnoremap [fugitive]b :<C-u>Git blame<CR>
'''

[[plugins]]
repo = 'airblade/vim-gitgutter'
on_event = 'VimEnter'
hook_add = '''
  nnoremap g] :GitGutterNextHunk<CR>
  nnoremap g[ :GitGutterPrevHunk<CR>
  nnoremap <C-s> :GitGutterStageHunk<CR>
  nnoremap <C-q> :GitGutterUndoHunk<CR>
'''

#-------------------------------------------
# Filer
#-------------------------------------------


#[[plugins]]
#repo = 'LumaKernel/fern-mapping-reload-all.vim'
#depends = ['fern.vim']
#hook_add = '''
#  function s:init_fern_mapping_reload_all()
#    nmap <buffer> R <Plug>(fern-action-reload:all)
#  endfunction
#
#  augroup my-fern-mapping-reload-all
#    autocmd!
#    autocmd FileType fern call s:init_fern_mapping_reload_all()
#  augroup END
#'''


# [[plugins]]
# repo = 'scrooloose/nerdtree'
# on_cmd = ['NERDTreeFind', 'NERDTreeToggle']
# hook_add = '''
#   let g:NERDTreeShowHidden = 1
#   let g:NERDTreeChDirMode = 2
#   let g:NERDTreeIgnore = ['\.rbc$', '\~$', '\.pyc$', '\.db$', '\.sqlite$', '__pycache__', '\.git$']
#   let g:NERDTreeSortOrder = ['^__\.py$', '\/$', '*', '\.swp$', '\.bak$', '\~$']
#   let g:NERDTreeShowBookmarks = 1
#   let g:NERDTreeMapOpenInTabSilent = '<RightMouse>'
#   let g:NERDTreeWinSize = 50
#   let g:NERDTreeQuitOnOpen = 1
#   let g:NERDTreeLimitedSyntax = 1
#
#   set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.pyc,*.db,*.sqlite
#
#   nnoremap <silent> <F2> :NERDTreeFind<CR>
#   nnoremap <silent> <F3> :NERDTreeToggle<CR>
# '''

# [[plugins]]
# repo = 'ryanoasis/vim-devicons'
# on_source = 'nerdtree'
# hook_source = '''
#   " loading the plugin
#   let g:webdevicons_enable = 1
#   " adding the flags to NERDTree
#   let g:webdevicons_enable_nerdtree = 1
#   " adding to vim-airline's tabline
#   let g:webdevicons_enable_airline_tabline = 1
#   " adding to vim-airline's statusline
#   let g:webdevicons_enable_airline_statusline = 1
#   " turn on/off file node glyph decorations (not particularly useful)
#   let g:WebDevIconsUnicodeDecorateFileNodes = 1
#   " use double-width(1) or single-width(0) glyphs
#   " only manipulates padding, has no effect on terminal or set(guifont) font
#   let g:WebDevIconsUnicodeGlyphDoubleWidth = 1
# '''


[[plugins]]
repo = 'junegunn/fzf'

[[plugins]]
repo = 'junegunn/fzf.vim'
on_event = 'VimEnter'
depends = ['fzf']
hook_source = '''
  let g:fzf_action = {
        \ 'ctrl-s': 'split',
        \ 'ctrl-v': 'vsplit' }

  set wildmode=list:longest,list:full
  set wildignore+=*.o,*.obj,.git,*.rbc,*.pyc,__pycache__
  let $FZF_DEFAULT_COMMAND =  "find * -path '*/\.*' -prune -o -path 'node_modules/**' -prune -o -path 'target/**' -prune -o -path 'dist/**' -prune -o  -type f -print -o -type l -print 2> /dev/null"

  " The Silver Searcher
  if executable('ag')
    let $FZF_DEFAULT_COMMAND = 'ag --path-to-ignore ~/.agignore --hidden -g ""'
    set grepprg=ag\ --nogroup\ --nocolor

    nnoremap <Space>a :Ag<Space>
    nnoremap <Space>aw :Ag<Space><C-r><C-w>
  endif

  " ripgrep
  if executable('rg')
    let $FZF_DEFAULT_COMMAND = 'rg --files --hidden --follow --glob "!{node_modules/*,.git/*}"'
    set grepprg=rg\ --vimgrep
    command! -bang -nargs=* Find call fzf#vim#grep('rg --column --line-number --no-heading --fixed-strings --ignore-case --hidden --follow --glob "!.git/*" --color "always" '.shellescape(<q-args>).'| tr -d "\017"', 1, <bang>0)

    nnoremap <Space>a :Rg<Space>
    nnoremap <Space>aw :Rg<Space><C-r><C-w>
  endif

  cnoremap <C-P> <C-R>=expand("%:p:h") . "/" <CR>
  nnoremap <Space>f :Files<CR>
  nnoremap <Space>s :GFiles<CR>
  nnoremap <Space>S :GFiles?<CR>
  nnoremap <Space>b :Buffers<CR>
  nnoremap <space>x :Commands<CR>
  " nnoremap <Space>l :BLines<Space>

  " Mapping selecting mappings
  nmap <leader><tab> <plug>(fzf-maps-n)
  xmap <leader><tab> <plug>(fzf-maps-x)
  omap <leader><tab> <plug>(fzf-maps-o)
'''

[[plugins]]
repo = 'justinhoward/fzf-neoyank'
on_source = 'fzf'
hook_source = '''
 nnoremap <leader>y :FZFNeoyank<cr>
 nnoremap <leader>Y :FZFNeoyank " P<cr>
 vnoremap <leader>y :FZFNeoyankSelection<cr>
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = 'context_filetype.vim'
on_ft = ['vim', 'toml']
hook_add = '''
 let g:precious_enable_switch_CursorMoved = { '*': 0, 'help': 1 }
 let g:precious_enable_switchers = {
    \ "*" : {
    \   "setfiletype" : 0
    \ },
    \ "toml" : {
    \   "setfiletype" : 1
    \ },
    \ "html" : {
    \   "setfiletype" : 1
    \ },
    \ "haml" : {
    \   "setfiletype" : 0
    \ },
    \}
 autocmd MyAutoCmd InsertEnter * :PreciousSwitch
 autocmd MyAutoCmd InsertLeave * :PreciousReset"}
'''

#-------------------------------------------
# Register
#-------------------------------------------
[[plugins]]
repo = 'Shougo/neoyank.vim'
on_event = 'VimEnter'

[[plugins]]
repo = 'junegunn/vim-peekaboo'
on_event = 'VimEnter'
hook_source = '''
  let g:peekaboo_window = 'vert bo 80new'
'''

[[plugins]]
repo = 'SirVer/ultisnips'
on_event = 'BufRead'
hook_source = '''
  let g:UltiSnipsSnippetDirectories = [$HOME.'/.vim/UltiSnips']
  let g:UltiSnipsEditSplit = 'tabdo'

  augroup UtliSnipsFileTypeSetting
    autocmd!
    autocmd BufRead,BufNewFile *_spec.rb UltiSnipsAddFiletypes rspec.ruby
  augroup END
'''

[[plugins]]
repo = 'honza/vim-snippets'
on_event = 'VimEnter'

[[plugins]]
repo = 'neoclide/coc.nvim'
merge = 0
rev = 'release'
on_event = 'VimEnter'
hook_source = '''
  let g:coc_global_extensions = [
        \ 'coc-solargraph',
        \ 'coc-css',
        \ 'coc-html',
        \ 'coc-json',
        \ 'coc-yaml',
        \ 'coc-dictionary',
        \ 'coc-word',
        \ 'coc-snippets',
        \ 'coc-fzf-preview',
        \ 'coc-fish',
        \ ]
'''
hook_add = '''
  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)

  " Use K to show documentation in preview window.
  nnoremap <silent> K :call <SID>show_documentation()<CR>

  function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
      execute 'h '.expand('<cword>')
    elseif (coc#rpc#ready())
      call CocActionAsync('doHover')
    else
      execute '!' . &keywordprg . " " . expand('<cword>')
    endif
  endfunction


  " coc-snippets
  imap <C-l> <Plug>(coc-snippets-expand)
  vmap <C-j> <Plug>(coc-snippets-select)

  let g:coc_snippet_next = '<c-j>'
  let g:coc_snippet_prev = '<c-k>'

  imap <C-j> <Plug>(coc-snippets-expand-jump)
  xmap <leader>x  <Plug>(coc-convert-snippet)
'''

#-------------------------------------------
# Asynchronous
#-------------------------------------------
[[plugins]]
repo = 'dense-analysis/ale'
on_event = 'BufRead'
hook_add = '''
  let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']
  let g:ale_sign_error = '❌'
  let g:ale_sign_warning = '⚠'

  let g:ale_echo_msg_error_str = 'E'
  let g:ale_echo_msg_warning_str = 'W'
  let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
  let g:ale_disable_lsp = 1
  let g:ale_lint_on_save = 1
  let g:ale_lint_on_text_changed = 0

  " vim-airline
  let g:airline#extensions#ale#enabled = 1

  nmap <silent> <Up> <Plug>(ale_previous_wrap)
  nmap <silent> <Down> <Plug>(ale_next_wrap)
'''
